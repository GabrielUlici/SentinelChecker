/**
 * @author Gabriel Ulici
 *
 * Copyright (c) 2012 Night Ideas Lab (NIL)
 * 
 * This file was generated by Aldebaran Robotics ModuleGenerator
 */

#ifndef SENTINEL_CHECKER_H
#define SENTINEL_CHECKER_H

#include <alaudio/alsoundextractor.h>
#include <alcommon/almodule.h>
#include <alproxies/almemoryproxy.h>
#include <alproxies/alsentinelproxy.h>
#include <alproxies/alaudiodeviceproxy.h>
#include <alproxies/alaudioplayerproxy.h>
#include <alproxies/altexttospeechproxy.h>
#include <boost/shared_ptr.hpp>
#include <nao/object/sensordatashm.h>
#include <string>

namespace AL
{
	class ALBroker;
	class ALMemoryFastAccess;
	class ALMemoryProxy;
	class ALMotionProxy;
	class ALMutex;
}

namespace RDK2
{
	class SharedMemory;
}

namespace SPQR
{
	class SentinelChecker : public AL::ALModule
	{
		private:
			std::map<Legged::GetupOrientation,std::pair<std::vector<std::vector<float> >,std::vector<float> > > getupMap;
			
			static const float PROPERTY_GET_UP_HEADDOWN		= 2.7999; // 160.42°
			static const float PROPERTY_GET_UP_X			= 1.0000; //  57.30°
			static const float PROPERTY_GET_UP_Y			= 1.2999; //  74.50°
			static const float PROPERTY_REMOVE_STIFFNESS_X	= 0.8700; //  49.85°
			static const float PROPERTY_REMOVE_STIFFNESS_Y	= 0.7000; //  40.11°
			
			RDK2::SharedMemory* shmGameController;
			RDK2::SharedMemory* shmMotion;
			
			boost::shared_ptr<AL::ALMutex> fCallbackMutex;
			boost::shared_ptr<AL::ALMemoryFastAccess> fMemoryFastAccess;
			boost::shared_ptr<AL::ALMotionProxy> motionProxy;
			boost::shared_ptr< AL::ALMemoryProxy> memoryProxy;
			boost::shared_ptr<AL::ALProxy> audioDeviceProxy, audioProxy;
			boost::shared_ptr<AL::ALAudioDeviceProxy> aDevideProxy;
			
			AL::ALMemoryProxy fMemoryProxy;
			AL::ALSentinelProxy fSentinelProxy;
			AL::ALTextToSpeechProxy fTtsProxy;
			AL::ALAudioDeviceProxy fAudioDeviceProxy;
			// AL::ALAudioPlayerProxy fAudioPlayerProxy;
			
			std::vector<std::string> fSensorKeys;
			std::vector<float> sensorValues;
			std::string ip, robotName;
			
			float angleX, angleY;
			float fState, fStateBatteryLevel, fsStateBatteryLevel, fHead;
			long timestampShutdown, timestampBatteryLevel;
			int chestButtonPushCounter;
			bool fStateSimple, fStateDouble, fStateTriple, fStateBatteryLow, isGettingUp, isSit;
			
			void getup(const std::vector<std::vector<float> >&,const std::vector<float>&);
			void loadGetupConfigurations();
			
		public:
			SentinelChecker(boost::shared_ptr<AL::ALBroker>,const std::string&);
			
			virtual ~SentinelChecker();
			
			/** Overloading ALModule::init().
			*	This is called right after the module has been loaded.
			*/
			virtual void init();
			
			static void* getupStatusUpdaterThreadFn(SentinelChecker* me) { me->updateGetupStatus(); return 0; }
			static void* getupThreadFn(SentinelChecker* me) {me->getupNeededThreadFn(); return 0; }
			static void* zeroStiffnessThreadFn(SentinelChecker* me) { me->removeStiffnessThreadFn(); return 0; }
			static void* startingAgentThreadFn(SentinelChecker* me) { me->dummyThreadFn(); return 0; }
			
			void onSimpleClickOccured();
			void onDoubleClickOccured();
			void onTripleClickOccured();
			void onLeftBumperPressed();
			void onRightBumperPressed();
			void removeStiffnessThreadFn();			
			void setJoints(const std::string&) const;
			void setRobotName();
			void sit() const;
			void stand() const;
			void getupNeededThreadFn();
			void dummyThreadFn();
			void updateGetupStatus() const;
	};
}

#endif
